const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, StringSelectMenuBuilder, ButtonStyle } = require('discord.js');
const DebugLogger = require('./DebugLogger');
const { encodeToString } = require('../delimiterGeter');

/**
 * UI Manager v4
 * Ïã¨ÌîåÌïòÍ≥† Ï¶âÍ∞ÅÏ†ÅÏù∏ UI ÏÉùÏÑ±
 */
class UIManagerV4 {
    constructor(guildId, player) {
        this.guildId = guildId;
        this.player = player;
        this.logger = new DebugLogger('UIManagerV4', guildId);
        
        // Ïù¥Î™®ÏßÄ ÏÑ§Ï†ï
        this.emojis = {
            control: {
                prev: '‚èÆÔ∏è',
                playpause: {
                    play: '‚ñ∂Ô∏è',
                    pause: '‚è∏Ô∏è'
                },
                stop: '‚èπÔ∏è',
                next: '‚è≠Ô∏è'
            },
            volume: {
                down: 'üîâ',
                up: 'üîä',
                mute: 'üîá'
            },
            mode: {
                'normal': '‚û°Ô∏è',
                'repeat-one': 'üîÇ',
                'repeat-all': 'üîÅ',
                'shuffle': 'üîÄ'
            },
            sort: {
                'date': 'üìÖ',
                'abc': 'üî§'
            },
            source: {
                'youtube': 'üåê',
                'local': 'üíæ'
            },
            status: {
                playing: 'üéµ',
                paused: '‚è∏Ô∏è',
                stopped: '‚èπÔ∏è',
                loading: '‚è≥',
                idle: 'üí§'
            },
            misc: {
                autoplay: 'üîÑ',
                exit: '‚ùå',
                error: '‚ö†Ô∏è',
                success: '‚úÖ'
            }
        };
        
        this.logger.info('‚úÖ UI Manager v4 initialized');
    }

    /**
     * UI Î†åÎçîÎßÅ
     */
    render(state) {
        this.logger.trace('render');
        const timer = this.logger.startTimer('render UI');
        
        try {
            const embed = this.createEmbed(state);
            const components = this.createComponents(state);
            
            const result = {
                embeds: [embed],
                components: components
            };
            
            timer.end(true);
            return result;
            
        } catch (error) {
            this.logger.error('UI render failed', error);
            timer.end(false);
            
            // ÏóêÎü¨ UI Î∞òÌôò
            return this.createErrorUI(error.message);
        }
    }

    /**
     * ÏûÑÎ≤†Îìú ÏÉùÏÑ±
     */
    createEmbed(state) {
        const { currentTrack, queue, isPlaying, isPaused, volume, mode } = state;
        const nextTrack = this.getNextTrack(state);
        
        const embed = new EmbedBuilder()
            .setColor(this.getEmbedColor(state))
            .setTitle(`üéµ Music Player v4.0`)
            .addFields(
                { 
                    name: "ÌòÑÏû¨ Í≥°", 
                    value: currentTrack?.title || 'N/A', 
                    inline: true 
                },
                { 
                    name: "Ïû¨ÏÉù ÏãúÍ∞Ñ", 
                    value: currentTrack?.duration || 'N/A', 
                    inline: true 
                },
                { 
                    name: "Îã§Ïùå Í≥°", 
                    value: this.getNextTrackText(nextTrack, mode), 
                    inline: true 
                },
                { 
                    name: "Î≥ºÎ•®", 
                    value: `${Math.round(volume * 100)}%`, 
                    inline: true 
                },
                { 
                    name: "Ïû¨ÏÉù Î™®Îìú", 
                    value: this.getModeText(mode), 
                    inline: true 
                },
                { 
                    name: "ÏÉÅÌÉú", 
                    value: this.getPlaybackStatusText(state), 
                    inline: true 
                }
            )
            .setFooter({ 
                text: this.getFooterText(state)
            })
            .setThumbnail(currentTrack?.thumbnail || 'https://imgur.com/jCVVLrp.png')
            .setTimestamp();
        
        return embed;
    }

    /**
     * Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ± (v3 ÌíçÎ∂ÄÌïú UI Î≥µÏõê)
     */
    createComponents(state) {
        const components = [];
        
        // 1. Î©îÏù∏ Ïª®Ìä∏Î°§ Î≤ÑÌäº (Ïû¨ÏÉù, Ïù¥Ï†Ñ, Îã§Ïùå, Ï†ïÏßÄ, Î≥ºÎ•®ÏóÖ)
        components.push(this.createMainControlButtons(state));
        
        // 2. Î≥¥Ï°∞ Ïª®Ìä∏Î°§ Î≤ÑÌäº (Î≥ºÎ•®Îã§Ïö¥, Ï†ïÎ†¨, Î™®Îìú, ÏûêÎèôÏû¨ÏÉù, Ï¢ÖÎ£å)
        components.push(this.createSecondaryControlButtons(state));
        
        // 3. ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ ÏÑ†ÌÉù Î©îÎâ¥
        components.push(this.createPlaylistSelect(state));
        
        // 4. ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≤ÑÌäº (ÌïÑÏöîÌïú Í≤ΩÏö∞)
        if (state.queue.length > 15) {
            components.push(this.createPaginationButtons(state));
        }
        
        // 5. ÏÜåÏä§ Ï†ÑÌôò Î≤ÑÌäº
        components.push(this.createSourceButtons(state));
        
        return components.filter(Boolean);
    }

    /**
     * Î©îÏù∏ Ïª®Ìä∏Î°§ Î≤ÑÌäº ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº)
     */
    createMainControlButtons(state) {
        const { isPlaying, isPaused, volume, queue } = state;
        const hasPlaylist = queue.length > 0;
        
        const row = new ActionRowBuilder()
            .addComponents(
                // Î≥ºÎ•® ÏóÖ
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'volumeUp'))
                    .setEmoji(this.emojis.volume.up)
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(volume >= 1),
                
                // Ïù¥Ï†Ñ
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'prev'))
                    .setEmoji(this.emojis.control.prev)
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(!hasPlaylist),
                
                // Ïû¨ÏÉù/ÏùºÏãúÏ†ïÏßÄ
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'playpause'))
                    .setEmoji(isPaused || !isPlaying 
                        ? this.emojis.control.playpause.play 
                        : this.emojis.control.playpause.pause)
                    .setStyle(isPlaying || isPaused ? ButtonStyle.Success : ButtonStyle.Primary)
                    .setDisabled(!hasPlaylist),
                
                // Ï†ïÏßÄ
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'playstop'))
                    .setEmoji(this.emojis.control.stop)
                    .setStyle(ButtonStyle.Danger)
                    .setDisabled(!isPlaying && !isPaused),
                
                // Îã§Ïùå
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'next'))
                    .setEmoji(this.emojis.control.next)
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(!hasPlaylist)
            );
        
        return row;
    }

    /**
     * Î≥¥Ï°∞ Ïª®Ìä∏Î°§ Î≤ÑÌäº ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº)
     */
    createSecondaryControlButtons(state) {
        const { volume, mode, queue } = state;
        
        const row = new ActionRowBuilder()
            .addComponents(
                // Î≥ºÎ•® Îã§Ïö¥
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'volumeDown'))
                    .setEmoji(this.emojis.volume.down)
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(volume <= 0),
                
                // Ï†ïÎ†¨
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'sort'))
                    .setEmoji(this.emojis.sort[queue.sortType])
                    .setStyle(ButtonStyle.Primary),
                
                // Î™®Îìú
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'mode'))
                    .setEmoji(this.emojis.mode[mode])
                    .setStyle(ButtonStyle.Primary),
                
                // ÏûêÎèôÏû¨ÏÉù/Ïó∞Í≤∞ÏÉÅÌÉú
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'onOff'))
                    .setEmoji('‚úÖ')
                    .setStyle(ButtonStyle.Primary),
                
                // Ï¢ÖÎ£å
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'exit'))
                    .setEmoji('‚ùå')
                    .setStyle(ButtonStyle.Danger)
            );
        
        return row;
    }

    /**
     * ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ ÏÑ†ÌÉù Î©îÎâ¥ (v3 Ïä§ÌÉÄÏùº Î≥µÏõê)
     */
    createPlaylistSelect(state) {
        const { queue, currentIndex, isPlaying, currentTrack } = state;
        const currentPage = state.ui?.currentPage || 0;
        
        // ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const pageSize = 15; // v3 ÎåÄÎ°ú Î≥µÏõê
        const pageData = this.player.queue.getPageData(currentPage, pageSize);
        const pageItems = pageData.items;
        
        // Îπà ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏ Ï≤òÎ¶¨
        if (pageItems.length === 0) {
            const emptyMsg = queue.source === 'local' 
                ? "Î°úÏª¨ ÏùåÏïÖ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî."
                : "YouTube ÏùåÏïÖÏù¥ ÏóÜÏäµÎãàÎã§. Ï£ºÏÜåÎ•º Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.";
            
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId(encodeToString(this.guildId, "selectMenu"))
                .setPlaceholder(emptyMsg)
                .addOptions([{
                    label: "ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§",
                    description: "ÏùåÏïÖÏùÑ Ï∂îÍ∞ÄÌïú ÌõÑ ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî",
                    value: "empty",
                    emoji: "üì≠"
                }])
                .setDisabled(true);

            return new ActionRowBuilder().addComponents(selectMenu);
        }
        
        // ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî Î©îÏãúÏßÄ ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº)
        const menuMsg = isPlaying && currentTrack
            ? `üéµ Now Playing: ${currentTrack.title}`
            : "Ïû¨ÏÉùÌï† Í≥°ÏùÑ ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.";
        
        // ÏòµÏÖò ÏÉùÏÑ±
        const startIndex = currentPage * pageSize;
        const options = pageItems.map((track, pageIndex) => {
            const actualIndex = startIndex + pageIndex;
            const isCurrent = actualIndex === currentIndex;
            
            return {
                label: `${isCurrent ? '‚ñ∂ ' : ''}${track.title.slice(0, 80)}`,
                description: track.duration ? `Duration: ${track.duration}` : 'Unknown duration',
                value: encodeToString(this.guildId, "playListUrl", actualIndex),
                emoji: isCurrent ? 'üéµ' : undefined
            };
        }).slice(0, 25); // Discord Ï†úÌïú
        
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(encodeToString(this.guildId, "selectMenu"))
            .setPlaceholder(menuMsg)
            .addOptions(options);
        
        return new ActionRowBuilder().addComponents(selectMenu);
    }

    /**
     * ÏÉÅÌÉú Ïù¥Î™®ÏßÄ
     */
    getStatusEmoji(state) {
        if (state.isPlaying && !state.isPaused) {
            return this.emojis.status.playing;
        } else if (state.isPaused) {
            return this.emojis.status.paused;
        } else {
            return this.emojis.status.idle;
        }
    }

    /**
     * Î™®Îìú ÌÖçÏä§Ìä∏
     */
    getModeText(mode) {
        const modeTexts = {
            'normal': 'ÏàúÏ∞® Ïû¨ÏÉù',
            'repeat-one': 'Ìïú Í≥° Î∞òÎ≥µ',
            'repeat-all': 'Ï†ÑÏ≤¥ Î∞òÎ≥µ',
            'shuffle': 'ÏÖîÌîå Ïû¨ÏÉù'
        };
        
        return modeTexts[mode] || mode;
    }

    /**
     * ÏûÑÎ≤†Îìú ÏÉâÏÉÅ (v3 Ïä§ÌÉÄÏùº)
     */
    getEmbedColor(state) {
        if (state.isPlaying && !state.isPaused) {
            return 0x2ECC71; // Ï¥àÎ°ùÏÉâ
        } else if (state.isPaused) {
            return 0xE67E22; // ÏßÑÌïú Ï£ºÌô©ÏÉâ
        } else if (state.loading) {
            return 0xF39C12; // Ï£ºÌô©ÏÉâ
        } else {
            return 0x95A5A6; // ÌöåÏÉâ
        }
    }

    /**
     * ÏóêÎü¨ UI
     */
    createErrorUI(message) {
        const embed = new EmbedBuilder()
            .setColor(0xff0000)
            .setTitle('‚ö†Ô∏è Ïò§Î•ò Î∞úÏÉù')
            .setDescription(message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
            .setTimestamp();
        
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, 'musicPlayerButton', 'exit'))
                    .setLabel('Ï¢ÖÎ£å')
                    .setEmoji('‚ùå')
                    .setStyle(ButtonStyle.Danger)
            );
        
        return {
            embeds: [embed],
            components: [row]
        };
    }

    /**
     * Í∞ÑÎã®Ìïú ÏùëÎãµ ÏÉùÏÑ± (Îπ†Î•∏ ÏùëÎãµÏö©)
     */
    quickReply(message, type = 'info') {
        const colors = {
            info: 0x0099ff,
            success: 0x00ff00,
            warning: 0xffff00,
            error: 0xff0000
        };
        
        const embed = new EmbedBuilder()
            .setColor(colors[type] || colors.info)
            .setDescription(message);
        
        return { embeds: [embed] };
    }
    
    /**
     * ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≤ÑÌäº ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº Î≥µÏõê)
     */
    createPaginationButtons(state) {
        const currentPage = state.ui?.currentPage || 0;
        const totalItems = state.queue.length;
        const pageSize = 15;
        const maxPage = Math.ceil(totalItems / pageSize) - 1;
        
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, "pageNation", "pageFirst"))
                    .setLabel("<<")
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(currentPage === 0),
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, "pageNation", "pagePrev"))
                    .setLabel("<")
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(currentPage === 0),
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, "pageNation", "pageCurrent"))
                    .setLabel(`Page ${currentPage + 1}/${maxPage + 1}`)
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(true),
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, "pageNation", "pageNext"))
                    .setLabel(">")
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(currentPage >= maxPage),
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, "pageNation", "pageLast"))
                    .setLabel(">>")
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(currentPage >= maxPage)
            );
        
        return row;
    }
    
    /**
     * ÏÜåÏä§ Ï†ÑÌôò Î≤ÑÌäº ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº Î≥µÏõê)
     */
    createSourceButtons(state) {
        const { queue } = state;
        const isLocal = queue.source === 'local';
        
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(encodeToString(this.guildId, "musicPlayerButton", "Local"))
                    .setEmoji(this.emojis.source[queue.source])
                    .setStyle(isLocal ? ButtonStyle.Success : ButtonStyle.Secondary)
                    .setLabel(isLocal ? "Local Files" : "YouTube")
            );
        
        return row;
    }
    
    /**
     * Îã§Ïùå Ìä∏Îûô Í∞ÄÏ†∏Ïò§Í∏∞
     */
    getNextTrack(state) {
        const nextIndex = this.player.queue.getNextIndex(state.currentIndex, state.mode);
        if (nextIndex >= 0) {
            return this.player.queue.getTrack(nextIndex);
        }
        return null;
    }
    
    /**
     * Îã§Ïùå Í≥° ÌÖçÏä§Ìä∏ ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº)
     */
    getNextTrackText(nextTrack, mode) {
        if (nextTrack) {
            return nextTrack.title;
        }
        
        if (mode === 'shuffle') {
            return 'üîÄ ÏÖîÌîå ÎåÄÍ∏∞Ï§ë...';
        }
        
        return 'N/A';
    }
    
    /**
     * Ïû¨ÏÉù ÏÉÅÌÉú ÌÖçÏä§Ìä∏ (v3 Ïä§ÌÉÄÏùº)
     */
    getPlaybackStatusText(state) {
        if (state.isPlaying && !state.isPaused) {
            return 'üéµ Ïû¨ÏÉù Ï§ë';
        } else if (state.isPaused) {
            return '‚è∏Ô∏è ÏùºÏãúÏ†ïÏßÄ';
        } else {
            return 'üí§ ÎåÄÍ∏∞ Ï§ë';
        }
    }
    
    /**
     * Ìë∏ÌÑ∞ ÌÖçÏä§Ìä∏ ÏÉùÏÑ± (v3 Ïä§ÌÉÄÏùº)
     */
    getFooterText(state) {
        const { queue } = state;
        const sortText = queue.sortType === 'abc' ? 'Í∞ÄÎÇòÎã§' : 'ÎÇ†Ïßú';
        const sourceText = queue.source === 'local' ? 'Î°úÏª¨ ÌååÏùº' : 'YouTube';
        
        return `Ï†ïÎ†¨: ${sortText} | Î™©Î°ù: ${sourceText} | ${queue.length}Í≥°`;
    }
}

module.exports = UIManagerV4;