version: "3.9"

services:
  db:
    init: true
    container_name: cat_db
    env_file:
      - .env
    pull_policy: missing
    image: db
    build:
      context: .
      dockerfile: docker/mariadb/Dockerfile
    networks:
      - discord-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "3307:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    container_name: web
    image: web
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    # depends_on:
      # frontend:
      #   condition: service_started
    env_file:
      - .env
    networks:
      - discord-network
    volumes:
      - frontend_data:/web
      - cert:/etc/nginx/certs:ro
    extra_hosts:
      - "dev.crimecat.org:127.0.0.1"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    image: redis
    restart: on-failure
    container_name: redis
    init: true
    ports:
      - "6379:6379"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - discord-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    image: spring-backend
#    restart: always
    container_name: spring-backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mariadb://cat_db:3306/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASS}
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=${SPRING_ACTIVE_PROFILES}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - discord-network
    ports:
      - "8080:8080"
  #  volumes:
  #    - backend_data:/app

  # backend:
  #   build:
  #     context: .
  #     dockerfile: docker/backend/Dockerfile
  #   image: spring-backend
  #   container_name: spring-backend
  #   restart: on-failure
  #   environment:
  #     - SPRING_DATASOURCE_URL=jdbc:mariadb://cat_db:3306/${DB_NAME}
  #     - SPRING_DATASOURCE_USERNAME=${DB_USER}
  #     - SPRING_DATASOURCE_PASSWORD=${DB_PASS}
  #     - SERVER_PORT=8080
  #     - DOMAIN=${DOMAIN}
  #     - SPRING_SECRET_KEY=${SPRING_SECRET_KEY}
  #     - TEST_DB=${TEST_DB}
  #     - APP_ID=${APP_ID}
  #     - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
  #     - DISCORD_BOT_SECRET_TOKEN=${DISCORD_BOT_SECRET_TOKEN}
  #   env_file:
  #     - .env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - discord-network
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - backend_data:/app
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "5"

  # discord-app:
  #   init: true
  #   build:
  #     context: .
  #     dockerfile: docker/discord/Dockerfile
  #   container_name: discord-app
  #   image: discord-app
  #   env_file:
  #     - .env
  #   networks:
  #     - discord-network
  #   volumes:
  #     - app_data:/root/bot
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "5"

  # frontend:
  #   build:
  #     context: .
  #     dockerfile: docker/frontend/Dockerfile
  #   image: frontend
  #   container_name: frontend
  #   ports:
  #     - "5173:5173"
  #   networks:
  #     - discord-network
  #   env_file:
  #     - .env
  #   volumes:
  #     - frontend_data:/app
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "5"

networks:
  discord-network:
    driver: bridge

volumes:
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/database/mariadb/data
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/bot
  web_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/frontend/dist
  backend_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/backend
  frontend_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/frontend
  cert:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/nginx/certs